%
%
%
%
function [data, labels, dataScrambled] = noiseCorr_genData(Pdims, Pdims_withTuning, NperGroup, addNoiseCommon)

sigmaDefault = rand([2 4],1,Pdims);
muDefault = 0;
muTuned_Cl1 = 2;
muTuned_Cl2 = 10;

sigmaNoiseCommon = 4;  % so that std is variable
muNoiseCommon = 0;

sigmaData_Cl1 = ones(1,Pdims) .* sigmaDefault;
sigmaData_Cl2 = ones(1,Pdims) .* sigmaDefault;

muData_Cl1 = ones(1,Pdims) * muDefault;
muData_Cl2 = ones(1,Pdims) * muDefault;

muData_Cl1(1:Pdims_withTuning) = ones(1,Pdims_withTuning) * muTuned_Cl1;
muData_Cl2(1:Pdims_withTuning) = ones(1,Pdims_withTuning) * muTuned_Cl2;

labels = [ones(NperGroup,1)*0; ones(NperGroup,1)*1];

data1 = randn(NperGroup, Pdims) .* sigmaData_Cl1 + muData_Cl1;
data2 = randn(NperGroup, Pdims) .* sigmaData_Cl2 + muData_Cl2;

data = [ data1; data2 ];

if addNoiseCommon
    for k=1:size(data,1)    
        noiseCorrCommon = randn*sigmaNoiseCommon + muNoiseCommon;    
        data(k,:) = data(k,:) + noiseCorrCommon;
    end
end


%% scramble, within group
data1_scrambled = data(1:NperGroup,:);
data2_scrambled = data(NperGroup+1:end,:);
for j=1:Pdims
    data1_scrambled(:,j) = data1_scrambled(randperm(NperGroup), j);
    data2_scrambled(:,j) = data2_scrambled(randperm(NperGroup), j);
end

dataScrambled = [ data1_scrambled; data2_scrambled ];

